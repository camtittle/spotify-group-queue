// <auto-generated />

using Api.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Api.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Api.Infrastructure.Migrations
{
    [DbContext(typeof(SpotifyAppContext))]
    [Migration("20181115224111_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("api.Models.Party", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrentPartyId");

                    b.Property<bool>("IsOwner")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CASE WHEN OwnedPartyId IS NULL THEN 0 ELSE 1 END");

                    b.Property<string>("OwnedPartyId");

                    b.Property<string>("PendingPartyId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPartyId");

                    b.HasIndex("OwnedPartyId")
                        .IsUnique()
                        .HasFilter("[OwnedPartyId] IS NOT NULL");

                    b.HasIndex("PendingPartyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.HasOne("api.Models.Party", "CurrentParty")
                        .WithMany("Members")
                        .HasForeignKey("CurrentPartyId");

                    b.HasOne("api.Models.Party", "OwnedParty")
                        .WithOne("Owner")
                        .HasForeignKey("api.Models.User", "OwnedPartyId");

                    b.HasOne("api.Models.Party", "PendingParty")
                        .WithMany("PendingMembers")
                        .HasForeignKey("PendingPartyId");
                });
#pragma warning restore 612, 618
        }
    }
}
